import codecs

from Crypto.Cipher import Blowfish
from django.conf import settings
from django.db import connections, transaction

cipher = Blowfish.new(settings.GALAXY_SECRET.encode("utf-8"), mode=Blowfish.MODE_ECB)


class IntentionalRollback(Exception):
    pass


TRAINING_QUEUE_HEADERS = [
    "state",
    "job_runner_external_id",
    "tool_id",
    "user_id",
    "create_time",
]

HIDDEN_USERNAME = """
    substring(md5(COALESCE(galaxy_user.username, 'Anonymous') || now()::date), 0, 7)
"""

EXPOSED_USERNAME = """galaxy_user.username"""

if settings.TIAAS_EXPOSE_USERNAME:
    USERNAME = EXPOSED_USERNAME
else:
    USERNAME = HIDDEN_USERNAME

TRAINING_QUEUE_QUERY = f"""
SELECT
        job.state,
        job.job_runner_external_id AS extid,
        regexp_replace(job.tool_id, '.*toolshed.*/repos/', ''),
        {USERNAME},
        date_trunc('second', job.create_time) AS created
FROM
        job, galaxy_user
WHERE
        job.user_id = galaxy_user.id
        AND job.create_time > (now() AT TIME ZONE 'UTC' - (%s || ' hours')::interval)
        AND galaxy_user.id
                IN (
                                SELECT
                                        galaxy_user.id
                                FROM
                                        galaxy_user, user_group_association, galaxy_group
                                WHERE
                                        galaxy_group.name ilike 'training-' || %s
                                        AND galaxy_group.id = user_group_association.group_id
                                        AND user_group_association.user_id = galaxy_user.id
                        )
ORDER BY
        job.create_time DESC
LIMIT 300
"""

TRAINING_USERS_QUERY = f"""
SELECT
    {USERNAME}
FROM
        galaxy_user
WHERE
        galaxy_user.id
                IN (
                                SELECT
                                        galaxy_user.id
                                FROM
                                        galaxy_user, user_group_association, galaxy_group
                                WHERE
                                        galaxy_group.name ilike 'training-' || %s
                                        AND galaxy_group.id = user_group_association.group_id
                                        AND user_group_association.user_id = galaxy_user.id
                        )
"""


TRAINING_WF_QUEUE_HEADERS = [
    "user_id",
    "create_time",
    "workflow_name",
    "state",
    "id",
]
TRAINING_WF_QUEUE_QUERY = f"""

SELECT
    {USERNAME},
    date_trunc('second', workflow.create_time) AS created,
    workflow.name,
    workflow_invocation.state,
    workflow_invocation.id
FROM
    workflow_invocation
    left join workflow on workflow_invocation.workflow_id = workflow.id
    left join history on workflow_invocation.history_id = history.id
    left join galaxy_user on history.user_id = galaxy_user.id
WHERE
    workflow_invocation.create_time > (now() AT TIME ZONE 'UTC' - (%s || ' hours')::interval)
    AND galaxy_user.id
    IN (
        SELECT
            galaxy_user.id
        FROM
            galaxy_user, user_group_association, galaxy_group
        WHERE
            galaxy_group.name ilike 'training-' || %s
            AND galaxy_group.id = user_group_association.group_id
            AND user_group_association.user_id = galaxy_user.id
    )
ORDER BY
        workflow.create_time DESC
LIMIT 300
"""

DISASSOCIATE_ROLES_QUERY = """
DELETE FROM
    group_role_association
WHERE
    role_id
    IN (
        SELECT
            id
        FROM
            role
        WHERE
            type = 'system'
            AND name LIKE 'training-%%' || %s
    )
"""

# Create your views here.


def get_roles():
    roles = fetch_all(
        "select id, name from role where type in ('admin', 'system') and name like 'training-%%'"
    )
    for role in roles:
        yield {"id": role[0], "name": role[1]}


def create_role(training_id):
    execute(
        """
        insert into role (name, description, type, create_time, update_time, deleted)
        values (%s, 'Autogenerated role', 'system', now(), now(), false)
        """,
        (training_id,),
    )
    # get the role back
    role = fetch_all("select id from role where name = %s", (training_id,))
    for r in role:
        return r[0]
    return -1


def get_jobs(training_id, hours):
    jobs = fetch_all(TRAINING_QUEUE_QUERY, (hours, training_id.lower()))
    for job in jobs:
        yield dict(zip(TRAINING_QUEUE_HEADERS, job))


def get_workflow_invocations(training_id, hours):
    jobs = fetch_all(TRAINING_WF_QUEUE_QUERY, (hours, training_id.lower()))
    for job in jobs:
        yield dict(zip(TRAINING_WF_QUEUE_HEADERS, job))


def get_users(training_id):
    users = fetch_all(TRAINING_USERS_QUERY, (training_id.lower(),))
    for user in users:
        yield user[0]


def get_groups():
    groups = fetch_all(
        "select id, name from galaxy_group where name like 'training-%%'"
    )
    for group in groups:
        yield {"id": group[0], "name": group[1]}


def create_group(training_id, role_id):
    execute(
        "insert into galaxy_group (name, create_time, update_time, deleted) "
        "values (%s, now(), now(), false)",
        (training_id,),
    )
    # get the role back
    groups = fetch_all("select id from galaxy_group where name = %s", (training_id,))
    group_id = -1
    for group in groups:
        group_id = group[0]
    execute(
        "insert into group_role_association (group_id, role_id, create_time, update_time) "
        "values (%s, %s, now(), now())" % (group_id, role_id)
    )
    return group_id


def add_group_user(group_id, user_id):
    execute(
        "insert into user_group_association (user_id, group_id, create_time, update_time) "
        "values (%s, %s, now(), now())" % (user_id, group_id)
    )


def execute(query, params=None):
    with connections["galaxy"].cursor() as cursor:
        cursor.execute(query, params)


def execute_txn(query, params=None, commit=False):
    with transaction.atomic():  # Outer atomic, start a new transaction
        try:
            with transaction.atomic():  # Inner atomic block, create a savepoint
                with connections["galaxy"].cursor() as cursor:
                    cursor.execute(query, params)
                    result = cursor.fetchall()
                if not commit:
                    raise IntentionalRollback()
                return result
        except IntentionalRollback:
            pass


def fetch_all(query, params=None):
    with connections["galaxy"].cursor() as cursor:
        cursor.execute(query, params)
        result = cursor.fetchall()
    return result


def disassociate_role(role, commit=False):
    return execute_txn(DISASSOCIATE_ROLES_QUERY, (role,), commit=commit)


def authenticate(request):
    auth_token = request.COOKIES.get("galaxysession", None)
    if not auth_token:
        return None

    galaxy_encoded_session_id = codecs.decode(auth_token, "hex")
    galaxy_session_id = (
        cipher.decrypt(galaxy_encoded_session_id).decode("utf-8").lstrip("!")
    )

    with connections["galaxy"].cursor() as cursor:
        cursor.execute(
            """
            SELECT user_id, username
            FROM galaxy_session
            JOIN galaxy_user ON galaxy_session.user_id = galaxy_user.id
            WHERE session_key = %s;
            """,
            (galaxy_session_id,),
        )
        user = cursor.fetchone()

    if not user:
        return None

    user_id = user[0]

    return user_id
